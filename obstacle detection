import time
from robomaster import robot, led

#       defining variables
x_val = 0.3
y_val = 0.6
z_val = 90
distanceTof = [0]
distanceRight = [1]
distanceLeft = [2]


def sub_info_handler(batter_info, ep_robot):
    percent = batter_info
    print("Battery: {0}%.".format(percent))
    ep_led = ep_robot.led
    brightness = int(percent * 255 / 100)
    ep_led.set_led(comp="all", r=brightness, g=brightness, b=brightness)


def sub_data_handler(sub_info):
    global distanceTof
    global distanceRight
    global distanceLeft
    distance = sub_info
    print("tof1:{0}  tof2:{1}  tof3:{2}  tof4:{3}".format(distance[0], distance[1], distance[2], distance[3]))


def sub_position_handler(position_info):
    x, y, z = position_info  # unit m
    print("chassis position: x:{0}, y:{1}, z:{2}".format(x, y, z))

#       creating an ep_robot instance object of the Robot class


if __name__ == '__main__':
    ep_robot = robot.Robot()
    ep_robot.initialize(conn_type="rndis")
    ep_robot.set_robot_mode(mode=robot.CHASSIS_LEAD)

    ep_sensor = ep_robot.sensor
    ep_sensor.sub_distance(freq=5, callback=sub_data_handler)

    version = ep_robot.get_version()
    print("Robot version: {0}".format(version))

    #       obtaining the led, battery, camera, chassis objects
    ep_led = ep_robot.led
    ep_battery = ep_robot.battery
    ep_camera = ep_robot.camera
    ep_chassis = ep_robot.chassis
#    ep_camera.start_video_stream(display=False, resolution=camera.STREAM_360P)

    ep_battery.sub_battery_info(5, sub_info_handler, ep_robot)
    time.sleep(0.5)
    ep_battery.unsub_battery_info()

    ep_robot.play_sound(7, times=1)

###################### move CHASSIS ##############################
# ep_chassis = me.chassis
# x_val = 0.5
# y_val = 0.6
# z_val = 90
#
# # FORWARD ca. 23 cm
# ep_chassis.move(x=x_val, y=0, z=0, xy_speed=0.7).wait_for_completed()
# # BACKWARD ca. 23 cm
# ep_chassis.move(x=-x_val, y=0, z=0, xy_speed=0.7).wait_for_completed()
# # LEFT ca. 27 cm
# ep_chassis.move(x=0, y=-y_val, z=0, xy_speed=0.7).wait_for_completed()
# # RIGHT ca. 27 cm
# ep_chassis.move(x=0, y=y_val, z=0, xy_speed=0.7).wait_for_completed()
# # YAW LEFT 90°
# ep_chassis.move(x=0, y=0, z=z_val, z_speed=45).wait_for_completed()
# # YAW RIGHT 90°
# ep_chassis.move(x=0, y=0, z=-z_val, z_speed=45).wait_for_completed()
####################################################################

    while True:

        # ep_camera.start_video_stream(display=True, resolution=camera.STREAM_360P)

        if distanceTof[0] >= 1000:
            ep_led.set_led(comp=led.COMP_ALL, r=0, g=255, b=0, effect=led.EFFECT_ON)
            print("grösser als 10 cm")
            ep_chassis.move(x=x_val, y=0, z=0, xy_speed=0.7) # .wait_for_completed()
            time.sleep(1.3)

        if distanceTof[0] < 1000:
            ep_led.set_led(comp=led.COMP_ALL, r=255, g=0, b=0, effect=led.EFFECT_ON)
            print("kleiner als 10 cm")
            ep_chassis.move(x=-x_val, y=0, z=0, xy_speed=0.7).wait_for_completed()
            ep_chassis.move(x=0, y=0, z=-z_val, z_speed=45).wait_for_completed()

        # ep_robot.play_sound(2, times=1)

        # ep_camera.stop_video_stream()
        # ep_camera.start_video_stream(display=False)
        break

#       releasing the robot resources
    ep_robot.close()

exit()
